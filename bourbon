#!/system/bin/sh
# Bourbonâ„¢ by Pedro (pedrozzz0 @ GitHub)
# Thanks to Draco (tytydraco @ GitHub) and Matt Yang (yc9559 @ CoolApk)
# If you wanna use the code as part of your project, please maintain the credits to it's respectives authors

#####################
# Variables
#####################
bbn_log="/data/media/0/ktsr/bourbon.log"
bbn_info="/data/media/0/ktsr/bourbon.info"
ver="1.2.0"
intent_act="android.intent.action.MAIN"
intent_cat="android.intent.category.HOME"
launcher_pkg="$(pm resolve-activity -a "$intent_act" -c "$intent_cat" | grep packageName | head -1 | cut -d= -f2)"
	
[[ -d "/data/adb/modules/KTSR/" ]] && {
	write_info "[!] KTSR found, exiting..."
	exit 1
}

notif_start() { su -lp 2000 -c "cmd notification post -S bigtext -t 'Bourbon is executing' tag 'Optimizing system tasks...'" >/dev/null 2>&1; }
notif_end() { su -lp 2000 -c "cmd notification post -S bigtext -t 'Bourbon is executing' tag 'Optimization done!'" >/dev/null 2>&1; }

write_info() { echo "$1" >"$bbn_info"; }

save_info() {
	write_info "[*] Bourbon - the essential task optimizer 
Version: $ver
Last performed: $(date '+%Y-%m-%d %H:%M:%S')
"
}

# $1:task_name $2:cgroup_name $3:"cpuset"/"stune"
change_task_cgroup() {
	for temp_pid in $(echo "$ps_ret" | grep -i -E "$1" | awk '{print $1}'); do
		for temp_tid in $(ls "/proc/$temp_pid/task/"); do
			comm="$(cat "/proc/$temp_pid/task/$temp_tid/comm")"
			echo "$temp_tid" >"/dev/$3/$2/tasks"
		done
	done
}

# $1:process_name $2:cgroup_name $3:"cpuset"/"stune"
change_proc_cgroup() {
	for temp_pid in $(echo "$ps_ret" | grep -i -E "$1" | awk '{print $1}'); do
		comm="$(cat "/proc/$temp_pid/comm")"
		echo "$temp_pid" >"/dev/$3/$2/cgroup.procs"
	done
}

# $1:task_name $2:thread_name $3:cgroup_name $4:"cpuset"/"stune"
change_thread_cgroup() {
	for temp_pid in $(echo "$ps_ret" | grep -i -E "$1" | awk '{print $1}'); do
		for temp_tid in $(ls "/proc/$temp_pid/task/"); do
			comm="$(cat "/proc/$temp_pid/task/$temp_tid/comm")"
			[[ "$(echo "$comm" | grep -i -E "$2")" != "" ]] && echo "$temp_tid" >"/dev/$4/$3/tasks"
		done
	done
}

# $1:task_name $2:cgroup_name $3:"cpuset"/"stune"
change_main_thread_cgroup() {
	for temp_pid in $(echo "$ps_ret" | grep -i -E "$1" | awk '{print $1}'); do
		comm="$(cat "/proc/$temp_pid/comm")"
		echo "$temp_pid" >"/dev/$3/$2/tasks"
	done
}

# $1:task_name $2:hex_mask(0x00000003 is CPU0 and CPU1)
change_task_affinity() {
	for temp_pid in $(echo "$ps_ret" | grep -i -E "$1" | awk '{print $1}'); do
		for temp_tid in $(ls "/proc/$temp_pid/task/"); do
			comm="$(cat "/proc/$temp_pid/task/$temp_tid/comm")"
			taskset -p "$2" "$temp_tid" >>"$bbn_log"
		done
	done
}

# $1:task_name $2:thread_name $3:hex_mask(0x00000003 is CPU0 and CPU1)
change_thread_affinity() {
	for temp_pid in $(echo "$ps_ret" | grep -i -E "$1" | awk '{print $1}'); do
		for temp_tid in $(ls "/proc/$temp_pid/task/"); do
			comm="$(cat "/proc/$temp_pid/task/$temp_tid/comm")"
			[[ "$(echo "$comm" | grep -i -E "$2")" != "" ]] && taskset -p "$3" "$temp_tid" >>"$bbn_log"
		done
	done
}

# $1:task_name $2:nice(relative to 120)
change_task_nice() {
	for temp_pid in $(echo "$ps_ret" | grep -i -E "$1" | awk '{print $1}'); do
		for temp_tid in $(ls "/proc/$temp_pid/task/"); do
			renice -n +40 -p "$temp_tid"
			renice -n -19 -p "$temp_tid"
			renice -n "$2" -p "$temp_tid"
		done
	done
}

# $1:task_name $2:thread_name $3:nice(relative to 120)
change_thread_nice() {
	for temp_pid in $(echo "$ps_ret" | grep -i -E "$1" | awk '{print $1}'); do
		for temp_tid in $(ls "/proc/$temp_pid/task/"); do
			comm="$(cat "/proc/$temp_pid/task/$temp_tid/comm")"
			[[ "$(echo "$comm" | grep -i -E "$2")" != "" ]] && {
				renice -n +40 -p "$temp_tid"
				renice -n -19 -p "$temp_tid"
				renice -n "$3" -p "$temp_tid"
			}
		done
	done
}

# $1:task_name $2:priority(99-x, 1<=x<=99) (SCHED_RR)
change_task_rt() {
	for temp_pid in $(echo "$ps_ret" | grep -i -E "$1" | awk '{print $1}'); do
		for temp_tid in $(ls "/proc/$temp_pid/task/"); do
			comm="$(cat "/proc/$temp_pid/task/$temp_tid/comm")"
			chrt -p "$temp_tid" "$2" >>"$bbn_log"
		done
	done
}

# $1:task_name $2:priority(99-x, 0<=x<=99) (SCHED_IDLE)
change_task_rt_idle() {
	for temp_pid in $(echo "$ps_ret" | grep -i -E "$1" | awk '{print $1}'); do
		for temp_tid in $(ls "/proc/$temp_pid/task/"); do
			comm="$(cat "/proc/$temp_pid/task/$temp_tid/comm")"
			chrt -i -p "$temp_tid" "$2" >>"$bbn_log"
		done
	done
}

# $1:task_name $2:priority(99-x, 1<=x<=99) (SCHED_FIFO)
change_task_rt_ff() {
	for temp_pid in $(echo "$ps_ret" | grep -i -E "$1" | awk '{print $1}'); do
		for temp_tid in $(ls "/proc/$temp_pid/task/"); do
			comm="$(cat "/proc/$temp_pid/task/$temp_tid/comm")"
			chrt -f -p "$temp_tid" "$2" >>"$bbn_log"
		done
	done
}

# $1:task_name $2:thread_name $3:priority(99-x, 1<=x<=99)
change_thread_rt() {
	for temp_pid in $(echo "$ps_ret" | grep -i -E "$1" | awk '{print $1}'); do
		for temp_tid in $(ls "/proc/$temp_pid/task/"); do
			comm="$(cat "/proc/$temp_pid/task/$temp_tid/comm")"
			[[ "$(echo "$comm" | grep -i -E "$2")" != "" ]] && chrt -p "$3" "$temp_tid" >>"$bbn_log"
		done
	done
}

# $1:task_name $2:class_type(0: none, 1:realtime, 2:best_effort 3:idle) $3:class_level
change_task_io_prio() {
	for temp_pid in $(echo "$ps_ret" | grep -i -E "$1" | awk '{print $1}'); do
		for temp_tid in $(ls "/proc/$temp_pid/task/"); do
			ionice -c "$2" -n "$3" -p "$temp_tid" >>"$bbn_log"
		done
	done
}

# $1:task_name $2:hex_mask(0x00000003 is CPU0 and CPU1)
change_irq_affinity() {
    for irq in $(grep -rE "$1" /proc/interrupts | grep -oE "^[[:digit:]]+" | sort -u); do
        echo "$2" > "/proc/irq/$irq/smp_affinity"
    done
}

# $1:task_name
change_task_high_prio() { change_task_nice "$1" "-20"; }

# $1:task_name $2:thread_name
change_thread_high_prio() { change_thread_nice "$1" "$2" "-20"; }

# $1:task_name
change_task_io_idle() { change_task_io_prio "$1" "3" "0"; }

unpin_thread() { change_thread_cgroup "$1" "$2" "" "cpuset"; }

# 0-3
pin_thread_on_pwr() {
	unpin_thread "$1" "$2"
	change_thread_affinity "$1" "$2" "0f"
}

# 0-6
pin_thread_on_mid() {
	unpin_thread "$1" "$2"
	change_thread_affinity "$1" "$2" "7f"
}

# 4-7
pin_thread_on_perf() {
	unpin_thread "$1" "$2"
	change_thread_affinity "$1" "$2" "f0"
}

# 0-7
pin_thread_on_all() {
	unpin_proc "$1"
	change_task_affinity "$1" "ff"
}

# $1:task_name $2:thread_name $3:hex_mask
pin_thread_on_custom() {
	unpin_thread "$1" "$2"
	change_thread_affinity "$1" "$2" "$3"
}

# $1:task_name
unpin_proc() { change_task_cgroup "$1" "" "cpuset"; }

# 0-3
pin_proc_on_pwr() {
	unpin_proc "$1"
	change_task_affinity "$1" "0f"
}

# 0-6
pin_proc_on_mid() {
	unpin_proc "$1"
	change_task_affinity "$1" "7f"
}

# 4-7
pin_proc_on_perf() {
	unpin_proc "$1"
	change_task_affinity "$1" "f0"
}

# 7
pin_proc_on_prime() {
	unpin_proc "$1"
	change_task_affinity "$1" "80"
}

# 0-7
pin_proc_on_all() {
	unpin_proc "$1"
	change_task_affinity "$1" "ff"
}

# $1:task_name $2:hex_mask
pin_proc_on_custom() {
	unpin_proc "$1"
	change_task_affinity "$1" "$2"
}

pin_irq_on_pwr() {
	change_irq_affinity "$1" "0f"
}

pin_irq_on_perf() {
	change_irq_affinity "$1" "70"
}

pin_irq_on_prime() {
	change_irq_affinity "$1" "80"
}

# $1:task_name $2:hex_mask (first task) $3:hex_mask (rest of the tasks)
pin_proc_on_first() {
  local min_pid=999999
  local min_tid=999999
  
  for temp_pid in $(echo "$ps_ret" | grep -i -E "$1" | awk '{print $1}' | sort -n); do
    for temp_tid in $(ls "/proc/$temp_pid/task/"); do
      if [[ "$temp_pid" -lt "$min_pid" ]]; then
        min_pid="$temp_pid"
        min_tid="$temp_tid"
      fi
    done
  done

  [[ "$min_tid" != "999999" ]] && taskset -p "$2" "$min_tid" >> "$bbn_log"

  for temp_pid in $(echo "$ps_ret" | grep -i -E "$1" | awk '{print $1}' | sort -n); do
    for temp_tid in $(ls "/proc/$temp_pid/task/"); do
      if [[ "$temp_pid" -gt "$min_pid" ]]; then
        taskset -p "$3" "$temp_tid" >> "$bbn_log"
      fi
    done
  done
}

rebuild_ps_cache() { ps_ret="$(ps -Ao pid,args)"; }

# Userspace bourbon optimization
bbn_opt() {
	# Input dispatcher/reader
	change_thread_high_prio "system_server" "Input"
	# Render thread
	pin_thread_on_all "$launcher_pkg" "RenderThread|GLThread" "ff"
	pin_thread_on_pwr "$launcher_pkg" "GPU completion|HWC release|hwui|FramePolicy|ScrollPolicy|ged-swd"
	# Service manager
	change_task_high_prio "servicemanag"
	# Not important
	pin_thread_on_pwr "system_server" "TaskSnapshot|Greezer|CachedApp|SystemPressure|SensorService|[Mm]emory"
	change_task_nice "ipawq|iparepwq" "0"
	change_task_nice "wlan_logging_th" "10"
	# Graphics workers are prioritized to run on perf cores
	pin_irq_on_prime "msm_drm|fts"
	pin_irq_on_perf "kgsl_3d0_irq"
	change_task_high_prio "kgsl_worker_thread|devfreq_boost|mali_jd_thread|mali_event_thread"
	pin_proc_on_perf "kgsl_worker_thread|devfreq_boost"
	change_task_rt_ff "mali_jd_thread|devfreq_boost" "50"
	# SF should have all cores
	pin_proc_on_all "surfaceflinger"
	# Render threads
	# Pin only the first threads to prime, others are non-critical
	pin_proc_on_first "crtc_event:" "80" "0f"
	pin_proc_on_first "crtc_commit:" "80" "0f"
	pin_proc_on_prime "pp_event"
	pin_proc_on_perf "mdss_fb|mdss_disp_wake|vsync_retire_work|pq@"
	# TS workqueues on perf cluster to reduce latency
	pin_proc_on_perf "fts_wq|nvt_ts_work"
	change_task_rt_ff "fts_wq|nvt_ts_work" "50"
	# Samsung HyperHAL to perf cluster
	pin_proc_on_perf "hyper@"
	# CVP fence request handler
	change_task_high_prio "thread_fence"
	# Touchscreen related workers
	change_task_high_prio "speedup_resume_wq|load_tp_fw_wq|tcm_freq_hop|touch_delta_wq|tp_async|wakeup_clk_wq"
	# RT priority adequately for critical tasks
	change_task_rt_ff "kgsl_worker_thread|crtc_commit|crtc_event|pp_event" "16"
	change_task_rt_ff "rot_commitq_|rot_doneq_|rot_fenceq_" "5"
	change_task_rt_ff "system_server|surfaceflinger|composer" "2"
	# Boost app boot process
	change_task_high_prio "zygote"
	# VM writeback
	change_task_high_prio "writeback"
	# Affects IO latency/throughput
	change_task_high_prio "kblockd|rcu_tasks_kthre|ufs_clk_gating|mmc_clk_gate"
	# System thread
	change_task_high_prio "system"
	# Affects camera startup speed
	change_task_high_prio "kverityd"
	# GC should run conservatively as possible to reduce latency spikes
	change_task_io_idle "f2fs_gc"
	change_task_rt_idle "f2fs_gc" "0"
}

bbn_cli() {
  banner="**********************************************"
  clear
  echo ""
  echo "$banner"
  echo "* Bourbon Command Line Interface (CLI) *"
  echo "$banner"
  echo ""
  echo "Version: 1.2.0-r1"
  echo ""
  echo "1 - Change process priority to high"
  echo ""
  echo "2 - Pin cores to process"
  echo ""
  echo "[E] Exit"
  echo ""
  echo -n "[*] Select an option: "
  read -r option
  case "$option" in
    1)
      echo -n "[*] Insert task name: (E.G: com.brave.browser)"
      read -r task_name
      rebuild_ps_cache
      change_task_high_prio "$task_name"
      echo "[*] Done!"
      ;;
    2)
      echo -n "[*] Input task name: (E.G: com.brave.browser)"
      read -r task_name
      echo -n "[*] Input task affinity: (E.G: f0 (4-7) in hex)"
      read -r affinity
      rebuild_ps_cache
      change_task_affinity "$task_name" "$affinity"
      echo "[*] Done!"
      ;;
    [eE])
      echo "Exiting..."
      exit 0
      ;;
    *)
      echo "Invalid option. Please try again."
      ;;
  esac
}

help_me() {
  echo "Bourbon 1.2.0
by pedrozzz0
Usage: bourbon
or: bourbon [options]...
Telegram group: https://t.me/kingprojectz
Supported options:
--cli [Show the command-line interface]
-h --help [show this message]"
  exit
}

if [[ "$1" == "--cli" ]]; then
  bbn_cli
elif [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
  help_me
else
  notif_start
  rebuild_ps_cache
  bbn_opt
  notif_end
  # Save mode to be applied automatically after reboot
  save_info
fi
